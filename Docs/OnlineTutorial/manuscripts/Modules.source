
<h1>Modules</h1>
<h2>Introduction</h2>
<p>Structuring a program by breaking it into parts is an important part of creating large programs.
In Dafny, this is accomplished via <em>modules</em>. Modules provide a way to
group together related types, classes, methods, functions, and other modules together, as well as control the scope of
declarations.
Modules may import each other for code reuse, and it is possible to abstract over modules to seperate an implementation
from an interface.
</p>

<h2>Declaring New Modules</h2>
<p>
  A new module is declared with the <c>module</c> keyword, followed by the name of the new module, and a
  pair of curly braces (<c>{}</c>) enclosing the body of the module:
</p>
<snippet>
module Mod {
  ...
}
</snippet>
<p>
  A module body can consist of anything that you could put at the toplevel. This includes classes, datatypes, types, methods, functions, etc.
</p>
<listing>
module Mod {
  class C {
    var f: int;
    method m() 
  }
  datatype Option = A(int) | B(int);
  type T;
  method m()
  function f()
}
</listing>
<p> You can also put a module inside another, in a nested fashion: </p>
<listing>
module Mod {
  module Helpers {
    class C {
      method doIt()
      var f: int;
    }
  }
}
</listing>
<p> Then you can refer the the members of the <c>Helpers</c> module within the <c>Mod</c>
module by prefixing them with "<c>Helpers.</c>". For example:
</p>
<listing>
module Mod {
  module Helpers { ... }
  method m() {
    var x := new Helpers.C;
    x.doIt();
    x.f := 4;
  }
}
<editor/>
module Mod {
  module Helpers {
    class C {
      method doIt()
      var f: int;
    }
  }
  method m() {
    var x := new Helpers.C;
    x.doIt();
    x.f := 4;
  }
}
</listing>
<p> Static methods and functions defined at the module level are available like classes, with just the module
name prefixing them. They are also available in the non-static methods and functions of the classes in the same module.
Putting non-static methods and functions at the module level isn't very useful, as there
is no way to refer to them outside of the module itself, although these methods and functions will be verified.</p>
<listing>
module Mod {
  module Helpers {
    static function method addOne(n: nat): nat {
      n + 1
    }
  }
  method m() {
    var x := 5;
    x := Helpers.addOne(x); // x is now 6
  }
}
</listing>
<p>It is important to note that the definitions of functions (and predicates) are not exposed
outside of the module they are defined in. So adding</p>
<listing>
  assert x == 6;
<editor/>
module Mod {
  module Helpers {
    static function method addOne(n: nat): nat {
      n + 1
    }
  }
  method m() {
    var x := 5;
    x := Helpers.addOne(x);
    assert x == 6; // this doesn't work
  }
}
</listing>
<p>to the end of <c>m()</c> will not verify. To fix this, we can add a post-condition to the 
function <c>addOne()</c> that says the result is one more, because post-conditions <strong>are</strong> exposed:
</p>
<listing>
  ensures addOne(n) == n + 1;
<editor/>
module Mod {
  module Helpers {
    static function method addOne(n: nat): nat 
      ensures addOne(n) == n + 1;
    {
      n + 1
    }
  }
  method m() {
    var x := 5;
    x := Helpers.addOne(x);
    assert x == 6; // this doesn't work
  }
}
</listing>
<p>and the assertion will be verified.</p>
<h2>Importing Modules</h2>
<p>Declaring new submodules is useful, but sometimes you want to refer to things from an existing module,
such as a library. In this case, you can <em>import</em> one module into another. This is done via the <c>import</c>
keyword, and there are a few different forms, each of which has a different meaning.
The simplest kind is the <em>concrete import</em>, and has the form <c>import A = B</c>. This declaration creates a reference to the module B
(which must already exist), and binds it to the new name A. Note this new name, i.e. <c>A</c>, is only bound in the
module containing the <c>import</c> declaration; it does not create a global alias. For example, if <c>Helpers</c> was
defined outside of <c>Mod</c>, then we could import it:
</p>
<listing>
module Helpers {
  ...
}
module Mod {
  import A = Helpers;
  method m() {
    assert A.addOne(5) == 6;
  }
}<editor/>
module Helpers {
  static function method addOne(n: nat): nat 
    ensures addOne(n) == n + 1;
  {
    n + 1
  }
}
module Mod {
  import A = Helpers;
  method m() {
    assert A.addOne(5) == 6;
  }
}
</listing>
<p>
Note that inside <c>m()</c>, we have to use <c>A</c> instead of <c>Helpers</c>, as we bound it to a different name.
The name <c>Helpers</c> is not available inside <c>m()</c>, as only names that have been bound inside <c>Mod</c> are available.
In order to use the members from another module, it either has to be declared there with <c>module</c> or imported with <c>import</c>.
</p>
<p> We don't have to give <c>Helpers</c> a new name, though, if we don't want to. We can write <c>import Helpers = Helpers</c> if we want to,
and Dafny even provides the shorthand <c>import Helpers</c> for this behavior. You can't bind two modules with the same name at the
same time, so sometimes you have to use the <c>=</c> version to ensure the names do not clash.
</p>

<h2>Opening Modules</h2>
<p> Sometimes prefixing the members of the module you imported with the name is tedious and ugly, even if you select a short name when importing it.
In this case, you can import the module as "<c>opened</c>", which causes all of its members to be available without adding the module name. The
<c>opened</c> keyword must immediately follow <c>import</c>, if it is present. For
example, we could write the previous example as:
</p>
<listing>
module Mod {
  import opened Helpers;
  method m() {
    assert addOne(5) == 6;
  }
}<editor/>
module Helpers {
  static function method addOne(n: nat): nat 
    ensures addOne(n) == n + 1;
  {
    n + 1
  }
}
module Mod {
  import opened Helpers;
  method m() {
    assert addOne(5) == 6;
  }
}
</listing>
<p>When opening modules, the newly bound members will have low priority, so they will be hidden by local
definitions. This means if you define a local function called <c>addOne</c>, the function from <c>Helpers</c>
will no longer be available under that name. When modules are opened, the original name binding is still
present however, so you can always use the name that was bound to get to anything that is hidden.
</p>
<listing>
module Mod {
  import opened Helpers;
  function addOne(n: nat): nat {
    n - 1
  }
  method m() {
    assert addOne(5) == 6; // this is now false,
                           // as this is the function just defined
    assert Helpers.addOne(5) == 6; // this is still true
  }
}
<editor/>
module Helpers {
  static function method addOne(n: nat): nat 
    ensures addOne(n) == n + 1;
  {
    n + 1
  }
}
module Mod {
  import opened Helpers;
  function addOne(n: nat): nat {
    n - 1
  }
  method m() {
    assert addOne(5) == 6; // this is now false,
                           // as this is the function just defined
    assert Helpers.addOne(5) == 6; // this is still true
  }
}
</listing>
<p>If you open two modules that both declare members with the same name, then neither member can
be referred to without a module prefix, as it would be ambiguous which one was meant. Just opening
the two modules is not an error, however, as long as you don't attempt to use members with common names.</p>
<p>The <c>opened</c> keyword can be used with any kind of <c>import</c> declaration, including the <em>module abstraction</em> form.
</p>
<h2>Module Abstraction</h2>
<p>Sometimes an using a specific implementation is unnecessary; instead all that is needed is a module that implements some interface.
In that case, you can use an <em>abstract</em> module import. In Dafny, this is written <c>import A as B</c>. This means bind the name
<c>A</c> as before, but instead of getting the exact module <c>B</c>, you get any module which is a <em>refinement</em> of <c>B</c>. Typically, the module
<c>B</c> may have abstract type definitions, classes with bodyless methods, or otherwise be unsuitable to use directly. Because of the way refinement
is defined, any refinement of <c>B</c> can be used safely. For example, if we start with:
</p>
<listing>
module Interface {
  static function method addSome(n: nat): nat 
    ensures addSome(n) > n;
}
module Mod {
  import A as Interface;
  method m() {
    assert 6 <= A.addSome(5);
  }
}
</listing>
<p>then we can be more precise if we know that <c>addSome</c> actually adds exactly one. The following module has this behavior. Further, the post-condition is stronger,
so this is actually a refinement of the <c>Interface</c> module.</p>
<listing>
module Implementation {
  static function method addSome(n: nat): nat 
    ensures addSome(n) == n + 1;
  {
    n + 1
  }
}
</listing>
<p>We can then substitute <c>Implementation</c> for <c>A</c> in a new module, by declaring a refinement of <c>Mod</c> which defines <c>A</c> to be <c>Implementation</c>.</p>
<listing>
module Mod2 refines Mod {
  import A = Implementation;
  ...
}
<editor/>
module Interface {
  static function method addSome(n: nat): nat 
    ensures addSome(n) > n;
}
module Mod {
  import A as Interface;
  method m() {
    assert 6 <= A.addSome(5);
  }
}
module Implementation {
  static function method addSome(n: nat): nat 
    ensures addSome(n) == n + 1;
  {
    n + 1
  }
}
module Mod2 refines Mod {
  import A = Implementation;
  method m() {
    ...;
    // this is now provable, because we know A is Implementation
    assert 6 == A.addSome(5);
  }
}
</listing>
<p>You can also give an implementation directly, without introducing a refinement, by giving a <em>default</em> to the abstract import:
</p>
<listing>
module Mod2 refines Mod {
  import A as Interface default Implementation;
  ...
}
<editor/>
module Interface {
  static function method addSome(n: nat): nat 
    ensures addSome(n) > n;
}
module Mod {
  import A as Interface default Implementation;
  method m() {
    assert 6 <= A.addSome(5);
  }
}
module Implementation {
  static function method addSome(n: nat): nat 
    ensures addSome(n) == n + 1;
  {
    n + 1
  }
}
</listing>
<p>Regardless of whether there is a default, the only things known about <c>A</c> in this example is that it has an <c>addSome</c> that returns a strictly bigger result, so
even with the default we still can't prove that <c>A.addSome(5) == 6</c>, only that <c>6 <= A.addSome(5)</c>.
</p>
<p>When you refine an abstract import into a concrete one, or giving a <c>default</c>, you have to make sure that the concrete module is a refinement of the abstract one.
This means that the methods must have compatible signatures, all the classes and datatypes with their constructors and fields in the abstract one must be present in the
concrete one, the specifications must be compatible, etc.
</p>
<h2>Module Ordering and Dependencies</h2>
<p>
  Dafny isn't particular about which order the modules appear in, but they must follow some rules to be well formed. As a general rule of thumb, there should be a way to order the modules in a program
  such that each only refers to things defined <strong>before</strong> it in the source text. That doesn't mean the modules have to be given in that order. Dafny will figure out that order for you, assuming
  you haven't made any circular references. For example, this is pretty clearly meaningless:
</p>
<listing>
import A = B;
import B = A;
</listing>
<p>You can have import statements at the toplevel, and you can import modules defined at the same level:</p>
<listing>
import A = B;
method m() {
  A.whatever();
}
module B { ... }
<editor/>
import A = B;
method m() {
  A.whatever();
}
module B {
  static method whatever() {}
}
</listing>
<p>In this case, everything is well defined because we can put <c>B</c> first, followed by the <c>A</c> import, and then finally <c>m()</c>. If there is no ordering,
then Dafny will give an error, complaining about a cyclic dependency.
</p>
<p>Note that when rearranging modules and imports, they have to be kept in the same containing module, which disallows some pathological module structures. Also, the
imports and submodules are always considered to be first, even at the toplevel. This means that the following is not well formed:</p>
<listing>
static method doIt() { }
module M {
  method m() {
    doIt();
  }
}
</listing>
<p>because the module <c>M</c> must come before any other kind of members, such as methods. To define global functions like this, you can put them in a module (called <c>Globals</c>, say),
and open it into any module that needs its functionality.
<p>Finally, if you import via a path, such as <c>import A = B.C</c>, then this creates a dependency of <c>A</c> on <c>B</c>, as we need to know what B is (is it abstract or concrete, or a refinement?).
</p>
</p>
<h2>Name Resolution</h2>
<p>When Dafny sees something like <c>A.B.C</c>, how does it know what each part refers to? The process Dafny uses to determine what identifier sequences like this refer
to is name resolution. Though the rules may seem complex, usually they do what you would expect. Dafny first looks up the initial identifier. Depending on what the first
identifier refers to, the rest of the identifier is looked up in the appropriate context. The full rules are as follows:
</p>
<ol>
  <li>Local variables, parameters and bound variables. These are things like <c>x</c>, <c>y</c>, and <c>i</c> in <c>var x;</c>, <c>... returns (y: int)</c>, and <c>forall i :: ...</c>.</li>
  <li>Classes, datatypes and module names. Classes allow their static members to be accessed in this way, 
    and datatypes allow their constructors to be accessed. Modules allow any of their members to be referred to like this</li>
  <li>Constructor names (if unambiguous). Any datatypes that don't need qualification (so the datatype name itself doesn't
    need a prefix), and also have a uniquely named constructor, can be referred to just by its name. So if <c>datatype List = Cons(List) | Nil</c> 
    was the only datatype that declared <c>Cons</c> and <c>Nil</c> constructors, then you could write <c>Cons(Cons(Nil))</c>.
    If the constructor name is not unique, then you need to prefix it with the name of the datatype (for example <c>List.Cons(List.Nil))</c>).
    This is done per constructor, not per datatype.</li>
  <li>Field, function, or method of the current class (if in a static context, then only static methods and functions are allowed).
    You can refer to fields of the current class either as <c>this.f</c> or <c>f</c>,
    assuming of course that <c>f</c> hasn't be hidden by one of the above. You can always prefix <c>this</c> if needed, which cannot be hidden.
</li>
  <li>Static function or method in the enclosing module. Note this refers only to functions and methods declared at the 
  module level, not static members of a named class.</li>
</ol>
<p>Opened modules are treated at each level, after the declarations in the current module. Opened modules only affect steps 2, 3 and 5.
If a ambiguous name is found, an error is generated, rather than continuing down the list.</p>
<p>After the first identifer, the rules are basically the same, except in the new context. For example, if the first identifier was a 
module, then the next identifier would look into that module. Opened modules only apply within the module it is opened into. When looking
up into another module, only things explicitly declared in that module are considered.</p>