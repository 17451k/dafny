// Bitvectors.dfy

/*
module _System {
  /* CALL GRAPH for module _System:
   */
  type string = seq<char>

  class {:compile false} object { }

  class {:compile false} array<arg> {
    var Length: int  // immutable
  }

  class {:compile false} _#Func0<T0> {
    function requires(): bool
      reads reads()

    function reads(): set<object>
      reads reads()
  }
}
// bitvector types in use: bv1 bv32 bv47 bv16 bv64
*/

/* CALL GRAPH for module _module:
 * SCC at height 6:
 *   _default.M
 * SCC at height 5:
 *   _default.Main
 * SCC at height 4:
 *   _default.SummoTests
 * SCC at height 3:
 *   _default.Unary
 * SCC at height 2:
 *   _default.DoArith32
 * SCC at height 1:
 *   _default.Arithmetic
 * SCC at height 0:
 *   _default.BitwiseOperations
 */
method M(a: bv1, b: bv32)
    returns (c: bv32, d: bv1)
  decreases a, b
{
  c := b;
  d := a;
  var x: bv32 := 5000;
  c := x;
  var y: bv32 := 4000;
  y := c;
}

method Main()
{
  var x: bv32 := 4000;
  var y: bv32 := 4000;
  var z: bv32;
  var w: bv32;
  if x == y {
    z := x;
  } else {
    w := y;
  }
  print x, " ", y, " ", z, " ", w, "\n";
  var t: bv47, u: bv47, v: bv47 := BitwiseOperations();
  print t, " ", v, " ", v, "\n";
  DoArith32();
  var unry: bv16 := Unary(5);
  print "bv16: 5 - 2 == ", unry, "\n";
  unry := Unary(1);
  print "bv16: 1 - 2 == ", unry, "\n";
  SummoTests();
}

method BitwiseOperations() returns (a: bv47, b: bv47, c: bv47)
{
  b, c := 2053, 1099;
  a := b & c;
  a := a | a | (b & b & c & (a ^ b ^ c) & a);
}

method Arithmetic(x: bv32, y: bv32)
    returns (r: bv32, s: bv32)
  ensures r == x + y && s == y - x
  decreases x, y
{
  r := x + y;
  s := y - x;
}

method DoArith32()
{
  var r: bv32, s: bv32 := Arithmetic(65, 120);
  print r, " ", s, "\n";
  var x: bv32, y: bv32 := 2147483647, 2147483651;
  r, s := Arithmetic(x, y);
  assert r == 2 && s == 4;
  print r, " ", s, "\n";
  assert x < y && x <= y && y >= x && y > x;
  print "Comparisons: ", x < y, " ", x <= y, " ", x >= y, " ", x > y, "\n";
}

method Unary(x: bv16) returns (y: bv16)
  ensures y == x - 2
  decreases x
{
  y := --!-!!--x;
  y := !-y;
  var F: bv16 := 65535;
  calc {
    y;
    !---!-!!--x;
    F - ---!-!!--x;
    {
      assert ---!-!!--x == -!-!!--x;
    }
    F - -!-!!--x;
    F + !-!!--x;
    F + F - -!!--x;
    F + F + !!--x;
    {
      assert !!--x == --x == x;
    }
    F + F + x;
    x - 2;
  }
}

method SummoTests()
{
  var a: bv64 := 5;
  a := 2 * 2 * 2 * 2 * 2 * a * 2 * 2 * 2 * 2 * 2;
  var b: bv64 := a / 512;
  assert b == 10;
  assert b / 3 == 3 && b / 4 == 2;
  assert b % 3 == 1 && b % 4 == 2;
  print b / 3, " ", b % 4;
}

Dafny program verifier finished with 14 verified, 0 errors
Program compiled successfully
Running...

4000 4000 4000 0
1 1099 1099
185 55
2 4
Comparisons: True True False False
bv16: 5 - 2 == 3
bv16: 1 - 2 == 65535
3 2